{"name":"dbkit","body":"# dbkit\r\n\r\n**Documentation:** http://dbkit.readthedocs.org/\r\n\r\n**dbkit** is a library that abstracts away at least part of the pain involved in dealing with [DB-API 2](http://www.python.org/dev/peps/pep-0249/) compatible database drivers.\r\n\r\n## Overview\r\n\r\n*dbkit* is intended to be used in circumstances where it is impractical or overkill to use an ORM such as [SQLObject](http://sqlobject.org/) or [SQLAlchemy](http://sqlalchemy.org/), but it would be useful to at least abstract away some of the pain involved in dealing with the database.\r\n\r\n### Features\r\n\r\n- Rather than passing around database connections, statements are executed within a database [context](http://docs.python.org/library/contextlib.html), thus helping to decouple modules that interface with the database from the database itself and its connection details.\r\n- Database contexts contain references to the exceptions exposed by the database driver, thus decoupling exception handling from the database driver.\r\n- Easier to use transaction handling.\r\n- Easier iteration over resultsets.\r\n- Connection pooling. In addition, any code using pooled connections has no need to know connection pooling is in place.\r\n- Query logging.\r\n\r\n### Non-aims\r\n\r\n-  Abstraction of SQL statements. The idea is to get rid of the more annoying but necessary boilerplate code involved in dealing with DB-API 2 drivers, not to totally abstract away SQL itself.","tagline":"Taking some of the pain out of Python's DB-API","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}